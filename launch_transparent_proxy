#!/bin/sh

# First we added a new chain called 'REDSOCKS' to the 'nat' table.
sudo iptables -t nat -N TRANSPROXY

 # We then told iptables to redirect all port 80 connections to the http-relay port
sudo iptables -t nat -C TRANSPROXY -p tcp --dport 80  -j REDIRECT --to-ports 3128 -w > /dev/null 2>&1 || \
sudo iptables -t nat -A TRANSPROXY -p tcp --dport 80  -j REDIRECT --to-ports 3128 -w

# and all other connections to the http-connect port.
sudo iptables -t nat -C TRANSPROXY -p tcp -j REDIRECT --to-ports 12345 -w > /dev/null 2>&1 || \
sudo iptables -t nat -A TRANSPROXY -p tcp -j REDIRECT --to-ports 12345 -w

if docker --version |grep 1.10.; then
  OPTIONS=""
else
  OPTIONS="-m addrtype --dst-type UNICAST ! --dst 172.0.0.0/8"
fi

# Finally we tell iptables to use the ‘TRANSPROXY’ chain for all outgoing connection in the network interface ‘eth0′.
sudo iptables -t nat -C PREROUTING -i docker0 -p tcp -j TRANSPROXY $OPTIONS > /dev/null 2>&1 || \
sudo iptables -t nat -A PREROUTING -i docker0 -p tcp -j TRANSPROXY $OPTIONS

docker rm -f transparent-proxy >/dev/null 2>&1
docker run --name=transparent-proxy --net=host -d amontaigu/transparent-proxy http://wpad/wpad.dat
